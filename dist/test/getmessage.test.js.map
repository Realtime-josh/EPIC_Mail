{"version":3,"sources":["../../server/test/getmessage.test.js"],"names":["describe","it","done","app","get","set","expect","then","response","body","message","toContain","delete"],"mappings":"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","file":"getmessage.test.js","sourcesContent":["import expect from 'expect';\r\nimport request from 'supertest';\r\nimport app from '../app';\r\n\r\ndescribe('GET /messages', () => {\r\n  it('should respond with all received messages', (done) => {\r\n    request(app)\r\n      .get('/api/v1/message/messages/2')\r\n      .set('Accept', 'application/json')\r\n      .expect(200)\r\n      .then((response) => {\r\n        expect(response.body.message).toContain('All received messages for Sally Marcus');\r\n      });\r\n    done()\r\n  });\r\n\r\n  it('should respond with all received messages', (done) => {\r\n    request(app)\r\n      .get('/api/v1/message/messages/1')\r\n      .set('Accept', 'application/json')\r\n      .expect(200)\r\n      .then((response) => {\r\n        expect(response.body.message).toContain('No messages found for user');\r\n      });\r\n    done();\r\n  });\r\n\r\n  it('should respond with all sent messages', (done) => {\r\n    request(app)\r\n      .get('/api/v1/message/messages/sent/1')\r\n      .set('Accept', 'application/json')\r\n      .expect(200)\r\n      .then((response) => {\r\n        expect(response.body.message).toContain('All Sent messages for Joshua Frankson');\r\n      });\r\n    done();\r\n  });\r\n\r\n\r\n  it('should respond with no record of sent messages', (done) => {\r\n    request(app)\r\n      .get('/api/v1/message/messages/sent/2')\r\n      .set('Accept', 'application/json')\r\n      .expect(200)\r\n      .then((response) => {\r\n        expect(response.body.message).toContain('No messages found for user');\r\n      });\r\n    done();\r\n  });\r\n\r\n  it('should respond with no record of unread messages', (done) => {\r\n    request(app)\r\n      .get('/api/v1/message/messages/unread/3')\r\n      .set('Accept', 'application/json')\r\n      .expect(200)\r\n      .then((response) => {\r\n        expect(response.body.message).toContain('No messages found for user');\r\n      });\r\n    done();\r\n  });\r\n\r\n  it('should respond with record of unread messages', (done) => {\r\n    request(app)\r\n      .get('/api/v1/message/messages/unread/2')\r\n      .set('Accept', 'application/json')\r\n      .expect(200)\r\n      .then((response) => {\r\n        expect(response.body.message).toContain('All unread messages for Sally Marcus');\r\n      });\r\n    done();\r\n  });\r\n\r\n  it('should respond with a valid email on fetch', (done) => {\r\n    request(app)\r\n      .get('/api/v1/message/email/2')\r\n      .set('Accept', 'application/json')\r\n      .expect(200)\r\n      .then((response) => {\r\n        expect(response.body.message).toContain('Email found');\r\n      });\r\n    done();\r\n  });\r\n\r\n\r\n  it('should delete email from inbox', (done) => {\r\n    request(app)\r\n      .delete('api/v1/message/messages/1/?userId=2')\r\n      .set('Accept', 'application/json')\r\n      .expect(200)\r\n      .then((response) => {\r\n        expect(response.body.message).toContain('Email successfully deleted');\r\n      });\r\n    done();\r\n  });\r\n\r\n\r\n  it('should return message for delete request without email', (done) => {\r\n    request(app)\r\n      .delete('/api/v1/message/messages/1?userId=1')\r\n      .set('Accept', 'application/json')\r\n      .expect(200)\r\n      .then((response) => {\r\n        expect(response.body.message).toContain('no email found');\r\n      });\r\n    done();\r\n  });\r\n\r\n  it('should return message for a specific email request', (done) => {\r\n    request(app)\r\n      .get('/api/v1/message/messages/specificmail/1?userId=2')\r\n      .set('Accept', 'application/json')\r\n      .expect(200)\r\n      .then((response) => {\r\n        expect(response.body.message).toContain('Email successfully fetched');\r\n      });\r\n    done();\r\n  });\r\n\r\n  it('should return message for specific email request not found but valid', (done) => {\r\n    request(app)\r\n      .get('/api/v1/message/messages/specificmail/1?userId=1')\r\n      .set('Accept', 'application/json')\r\n      .expect(200)\r\n      .then((response) => {\r\n        expect(response.body.message).toContain('no email found');\r\n      });\r\n    done();\r\n  });\r\n\r\n\r\n});\r\n"]}