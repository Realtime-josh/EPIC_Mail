{"version":3,"sources":["../../server/test/getmessage.test.js"],"names":["describe","it","app","get","set","expect","then","response","body","message","toContain","delete"],"mappings":"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","file":"getmessage.test.js","sourcesContent":["import expect from \"expect\";\r\nimport request from \"supertest\";\r\nimport app from \"../app\";\r\n\r\n\r\n\r\ndescribe(\"GET /messages\", ()=>{\r\n  it(\"should respond with all received messages\", ()=>{\r\n    request(app)\r\n    .get(\"/api/v1/message/receivedmessages/2\")\r\n    .set(\"Accept\", \"application/json\")\r\n    .expect(200)\r\n    .then((response)=>{\r\n      expect(response.body.message).toContain(\"All received messages for Sally Marcus\");\r\n    });\r\n\r\n  });\r\n\r\n   it(\"should respond with all received messages\", ()=>{\r\n    request(app)\r\n    .get(\"/api/v1/message/receivedmessages/1\")\r\n    .set(\"Accept\", \"application/json\")\r\n    .expect(200)\r\n    .then((response)=>{\r\n      expect(response.body.message).toContain(\"No messages found for user\");\r\n    });\r\n\r\n  });\r\n\r\n   it(\"should respond with all sent messages\", ()=>{\r\n    request(app)\r\n    .get(\"/api/v1/message/sentemails/1\")\r\n    .set(\"Accept\", \"application/json\")\r\n    .expect(200)\r\n    .then((response)=>{\r\n      expect(response.body.message).toContain(\"All Sent messages for Joshua Frankson\");\r\n    });\r\n\r\n  });\r\n\r\n\r\n   it(\"should respond with no record of sent messages\", ()=>{\r\n    request(app)\r\n    .get(\"/api/v1/message/sentemails/2\")\r\n    .set(\"Accept\", \"application/json\")\r\n    .expect(200)\r\n    .then((response)=>{\r\n      expect(response.body.message).toContain(\"No messages found for user\");\r\n    });\r\n\r\n  });\r\n\r\n    it(\"should respond with no record of unread messages\", ()=>{\r\n    request(app)\r\n    .get(\"/api/v1/message/unreadmails/3\")\r\n    .set(\"Accept\", \"application/json\")\r\n    .expect(200)\r\n    .then((response)=>{\r\n      expect(response.body.message).toContain(\"No messages found for user\");\r\n    });\r\n\r\n  });\r\n\r\n    it(\"should respond with record of unread messages\", ()=>{\r\n    request(app)\r\n    .get(\"/api/v1/message/unreadmails/2\")\r\n    .set(\"Accept\", \"application/json\")\r\n    .expect(200)\r\n    .then((response)=>{\r\n      expect(response.body.message).toContain(\"All unread messages for Sally Marcus\");\r\n    });\r\n\r\n  });\r\n\r\n\r\n     it(\"should respond with a valid email on fetch\", ()=>{\r\n    request(app)\r\n    .get(\"/api/v1/message/email/2\")\r\n    .set(\"Accept\", \"application/json\")\r\n    .expect(200)\r\n    .then((response)=>{\r\n      expect(response.body.message).toContain(\"Email found\");\r\n    });\r\n\r\n  });\r\n\r\n\r\n    it(\"should delete email from inbox\", ()=>{\r\n    request(app)\r\n    .delete(\"/api/v1/message/email/2?userMessageId=1\")\r\n    .set(\"Accept\", \"application/json\")\r\n    .expect(200)\r\n    .then((response)=>{\r\n      expect(response.body.message).toContain(\"Email successfully deleted\");\r\n    });\r\n\r\n  });\r\n\r\n    it(\"should return message for delete request without email\", ()=>{\r\n    request(app)\r\n    .delete(\"/api/v1/message/email/1?userMessageId=1\")\r\n    .set(\"Accept\", \"application/json\")\r\n    .expect(200)\r\n    .then((response)=>{\r\n      expect(response.body.message).toContain(\"no email found\");\r\n    });\r\n\r\n  });\r\n\r\n});\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n        \r\n\r\n \r\n  \r\n\r\n"]}