{"version":3,"sources":["../../server/test/function.test.js"],"names":["describe","it","res","les","bless","guess","toBe","firstCheck","secondCheck","thridCheck","fourthCheck","done","app","post","send","set","expect","end","err","body","error","toContain","status"],"mappings":"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","file":"function.test.js","sourcesContent":["import {isPositiveInteger} from \"../helpers/validators\";\r\nimport {trimAllSpace} from \"../helpers/validators\";\r\nimport {filterInput} from \"../helpers/validators\";\r\nimport expect from \"expect\";\r\nimport request from \"supertest\";\r\nimport app from \"../app\";\r\n\r\n\r\n\r\ndescribe(\"function tests\", ()=>{\r\n   it(\"should return a positive number\", ()=>{\r\n         const res = isPositiveInteger(2);\r\n         const les = isPositiveInteger(1.09);\r\n         const bless = isPositiveInteger(-3);\r\n         const guess = isPositiveInteger(\"3\");\r\n         expect(res).toBe(true);\r\n         expect(les).toBe(false);\r\n         expect(bless).toBe(false);\r\n         expect(guess).toBe(true);\r\n              \r\n   });\r\n\r\n\r\n   it(\"should trim all white spaces\", ()=>{\r\n         const res = trimAllSpace(\"  kelvin    \");\r\n         const les = trimAllSpace(\"ma  r k \");\r\n         const bless = trimAllSpace(\"  j a  k  e\");\r\n         const guess = trimAllSpace(\"Cla rke\");\r\n         expect(res).toBe(\"kelvin\");\r\n         expect(les).toBe(\"mark\");\r\n         expect(bless).toBe(\"jake\");\r\n         expect(guess).toBe(\"Clarke\");\r\n              \r\n   });\r\n\r\n   it(\"should flag special characters\", ()=>{\r\n         const firstCheck = filterInput(\"ke   lvin    %\");\r\n         const secondCheck = filterInput(\"ma  & r k \");\r\n         const thridCheck = filterInput(\"  j a <  k  e\");\r\n         const fourthCheck = filterInput(\"Cla ~rke\");\r\n         expect(firstCheck).toBe(true);\r\n         expect(secondCheck).toBe(true);\r\n         expect(thridCheck).toBe(true);\r\n         expect(fourthCheck).toBe(true);\r\n              \r\n   });\r\n\r\n});\r\n\r\n\r\n\r\n\r\n\r\n   describe(\"middlewares for routes\", ()=>{\r\n          it(\"should return error if user has already signed up\", (done) => {\r\n        request(app)\r\n          .post(\"/api/v1/contacts/createaccount\")\r\n          .send({\"email\" : \"franksonjoshua@gmail.com\",\r\n                  \"firstName\" : \"Joshua\",\r\n                  \"lastName\" : \"Frankson\",\r\n                  \"password\" : \"jddhehndhr\" })\r\n          .set(\"Accept\", \"application/json\")\r\n          .expect(400)\r\n          .expect(\"Content-Type\", /json/)\r\n          .end((err, res) => {\r\n            if (err) done(err);\r\n            expect(res.body.error).toContain(\"email already exist.\");\r\n            expect(res.body.status).toBe(400);\r\n\r\n         });\r\n          done();\r\n      });\r\n\r\n      it(\"should check email validity\", (done) =>{\r\n        request(app)\r\n       .post(\"/api/v1/contacts/createaccount\")\r\n       .send({\r\n                 \"email\" : \"frankson#$%joshua@gmail.com\",\r\n                  \"firstName\" : \"Joshua\",\r\n                  \"lastName\" : \"Frankson\",\r\n                  \"password\" : \"jddhehndhr\"\r\n       })\r\n      .set(\"Accept\", \"application/json\")\r\n      .expect(400)\r\n      .expect(\"Content-Type\", /json/)\r\n      .end((err,res)=>{\r\n      if(err) done(err);\r\n      expect(res.body.error).toContain(\"Ensure username, email and password are valid entries\");\r\n      expect(res.body.status).toBe(400);\r\n    });\r\n    done();\r\n});\r\n\r\n   \r\n   it(\"should check firstName validity\", (done) =>{\r\n        request(app)\r\n       .post(\"/api/v1/contacts/createaccount\")\r\n       .send({\r\n                 \"email\" : \"franksonjoshua@gmail.com\",\r\n                  \"firstName\" : \"Joshu%^$#@a\",\r\n                  \"lastName\" : \"Frankson\",\r\n                  \"password\" : \"jddhehndhr\"\r\n       })\r\n      .set(\"Accept\", \"application/json\")\r\n      .expect(400)\r\n      .expect(\"Content-Type\", /json/)\r\n      .end((err,res)=>{\r\n      if(err) done(err);\r\n      expect(res.body.error).toContain(\"Ensure username, email and password are valid entries\");\r\n      expect(res.body.status).toBe(400);\r\n    });\r\n    done();\r\n});\r\n\r\n\r\n   it(\"should check lastName validity\", (done) =>{\r\n        request(app)\r\n       .post(\"/api/v1/contacts/createaccount\")\r\n       .send({\r\n                 \"email\" : \"franksonjoshua@gmail.com\",\r\n                  \"firstName\" : \"Joshua\",\r\n                  \"lastName\" : \"Fra$%#@nkson\",\r\n                  \"password\" : \"jddhehndhr\"\r\n       })\r\n      .set(\"Accept\", \"application/json\")\r\n      .expect(400)\r\n      .expect(\"Content-Type\", /json/)\r\n      .end((err,res)=>{\r\n      if(err) done(err);\r\n      expect(res.body.error).toContain(\"Ensure username, email and password are valid entries\");\r\n      expect(res.body.status).toBe(400);\r\n    });\r\n    done();\r\n});\r\n\r\n   it(\"should check password length is greater than 6\", (done) =>{\r\n        request(app)\r\n       .post(\"/api/v1/contacts/createaccount\")\r\n       .send({\r\n                 \"email\" : \"franksonjoshua@gmail.com\",\r\n                  \"firstName\" : \"Joshua\",\r\n                  \"lastName\" : \"Frankson\",\r\n                  \"password\" : \"jddhe\"\r\n       })\r\n      .set(\"Accept\", \"application/json\")\r\n      .expect(400)\r\n      .expect(\"Content-Type\", /json/)\r\n      .end((err,res)=>{\r\n      if(err) done(err);\r\n      expect(res.body.error).toContain(\"Ensure username, email and password are valid entries\");\r\n      expect(res.body.status).toBe(400);\r\n    });\r\n    done();\r\n});\r\n\r\n\r\n    it(\"should return length of first name greater than 1\", (done) =>{\r\n        request(app)\r\n       .post(\"/api/v1/contacts/createaccount\")\r\n       .send({\r\n                 \"email\" : \"franksonjoshua@gmail.com\",\r\n                  \"firstName\" : \" \",\r\n                  \"lastName\" : \"Frankson\",\r\n                  \"password\" : \"jddhe\"\r\n       })\r\n      .set(\"Accept\", \"application/json\")\r\n      .expect(400)\r\n      .expect(\"Content-Type\", /json/)\r\n      .end((err,res)=>{\r\n      if(err) done(err);\r\n      expect(res.body.error).toContain(\"Ensure username, email and password are valid entries\");\r\n      expect(res.body.status).toBe(400);\r\n    });\r\n    done();\r\n});\r\n\r\n  it(\"should return length of lastName greater than 1\", (done) =>{\r\n        request(app)\r\n       .post(\"/api/v1/contacts/createaccount\")\r\n       .send({\r\n                 \"email\" : \"franksonjoshua@gmail.com\",\r\n                  \"firstName\" : \"Joshua\",\r\n                  \"lastName\" : \" \",\r\n                  \"password\" : \"jddhe\"\r\n       })\r\n      .set(\"Accept\", \"application/json\")\r\n      .expect(400)\r\n      .expect(\"Content-Type\", /json/)\r\n      .end((err,res)=>{\r\n      if(err) done(err);\r\n      expect(res.body.error).toContain(\"Ensure username, email and password are valid entries\");\r\n      expect(res.body.status).toBe(400);\r\n    });\r\n    done();\r\n});\r\n\r\n  it(\"should not return withspaces in names\", (done) =>{\r\n        request(app)\r\n       .post(\"/api/v1/contacts/createaccount\")\r\n       .send({\r\n                 \"email\" : \"franksonjoshua@gmail.com\",\r\n                  \"firstName\" : \"     \",\r\n                  \"lastName\" : \" \",\r\n                  \"password\" : \"jddhert\"\r\n       })\r\n      .set(\"Accept\", \"application/json\")\r\n      .expect(400)\r\n      .expect(\"Content-Type\", /json/)\r\n      .end((err,res)=>{\r\n      if(err) done(err);\r\n      expect(res.body.error).toContain(\"Ensure username, email and password are valid entries\");\r\n      expect(res.body.status).toBe(400);\r\n    });\r\n     done();\r\n  });\r\n\r\n\r\n  it(\"should return error for an unregistered email account\", (done) =>{\r\n        request(app)\r\n       .post(\"/api/v1/contacts/signin\")\r\n       .send({\r\n                 \"email\" : \"franksonjos@gmail.com\",\r\n                  \"password\" : \"yettiyea\"\r\n       })\r\n      .set(\"Accept\", \"application/json\")\r\n      .expect(400)\r\n      .expect(\"Content-Type\", /json/)\r\n      .end((err,res)=>{\r\n      if(err) done(err);\r\n      expect(res.body.error).toContain(\"email and password is not associated with a registered account\");\r\n      expect(res.body.status).toBe(400);\r\n    });\r\n     done();\r\n  });\r\n\r\n   it(\"should return error for an invalid email address\", (done) =>{\r\n        request(app)\r\n       .post(\"/api/v1/contacts/signin\")\r\n       .send({\r\n                 \"email\" : \"frankson$%#@jos@gmail.com\",\r\n                  \"password\" : \"yettiyea\"\r\n       })\r\n      .set(\"Accept\", \"application/json\")\r\n      .expect(400)\r\n      .expect(\"Content-Type\", /json/)\r\n      .end((err,res)=>{\r\n      if(err) done(err);\r\n      expect(res.body.error).toContain(\"Ensure email and password are valid entries\");\r\n      expect(res.body.status).toBe(400);\r\n    });\r\n     done();\r\n  });\r\n\r\n   it(\"should return error for a wrong password\", (done) =>{\r\n        request(app)\r\n       .post(\"/api/v1/contacts/signin\")\r\n       .send({\r\n                 \"email\" : \"franksonjoshua@gmail.com\",\r\n                  \"password\" : \"yettdhtes\"\r\n       })\r\n      .set(\"Accept\", \"application/json\")\r\n      .expect(400)\r\n      .expect(\"Content-Type\", /json/)\r\n      .end((err,res)=>{\r\n      if(err) done(err);\r\n      expect(res.body.error).toContain(\"email and password is not associated with a registered account\");\r\n      expect(res.body.status).toBe(400);\r\n    });\r\n     done();\r\n  });\r\n\r\n   it(\"should return error for an invalid password length\", (done) =>{\r\n                request(app)\r\n                .post(\"/api/v1/contacts/signin\")\r\n                .send({\r\n                     \"email\" : \"franksonjoshua@gmail.com\",\r\n                     \"password\" : \"yet\"\r\n             })\r\n              .set(\"Accept\", \"application/json\")\r\n              .expect(400)\r\n              .expect(\"Content-Type\", /json/)\r\n              .end((err,res)=>{\r\n              if(err) done(err);\r\n                  expect(res.body.error).toContain(\"Ensure email and password are valid entries\");\r\n                  expect(res.body.status).toBe(400);\r\n             });\r\n           done();\r\n    });\r\n        \r\n            \r\n});\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"]}