{"version":3,"sources":["../../server/helpers/validators.js"],"names":["dotenv","config","isPositiveInteger","test","s","filterInput","input","pattern","result","trimAllSpace","str","replace","atEpicMail","match","length","validateUserEntry","req","res","next","body","email","firstName","lastName","password","undefined","trimFirstName","trimLastName","trimEmail","validator","isEmail","payload","token","jwt","sign","process","env","SECRET_KEY","then","hashedPassword","bcrypt","genSalt","err","salt","hash","catch","send","validateUserSignIn","compare","data","userId","id","firstname","lastname","e","verifyToken","bearerHeader","headers","bearer","split","bearerToken"],"mappings":"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","file":"validators.js","sourcesContent":["import validator from 'validator';;\nimport { sendResponse } from './responses';\nimport { getEmail, insertUsers } from '../crud/db'\nimport bcrypt from 'bcryptjs'\nimport jwt from \"jsonwebtoken\"\nimport dotenv from 'dotenv';\n\ndotenv.config();\n// let connectionString = process.env.DATABASE_URL;\n\n\nconst isPositiveInteger = s => /^\\+?[1-9][\\d]*$/.test(s);\n\nconst filterInput = (input) => {\n  const pattern = /[~!#$%^&*()+={}:'\"<>?;',]/;\n  const result = pattern.test(input);\n  return result;\n};\n\nconst trimAllSpace = str => str.replace(/\\s+/g, '');\n\nconst atEpicMail = (input) => {\n  const result = input.match(/@epicmail.com/g)\n  if(result === null){\n  \treturn false;\n  }else if(result.length > 0){\n  \treturn true;\n  }\n};\n\n\nconst validateUserEntry = (req, res, next) => {\n  const {\n    email, firstName, lastName, password,\n  } = req.body;\n\n  if(email === undefined || firstName === undefined || lastName === undefined || password === undefined){\n    sendResponse(res, 400, null, \"Ensure that all fields are correctly filled out\")\n  }else{\n      const trimFirstName = trimAllSpace(firstName);\n      const trimLastName = trimAllSpace(lastName);\n      const trimEmail = trimAllSpace(email);\n        if (validator.isEmail(email) && atEpicMail(trimEmail) && !filterInput(trimFirstName) && trimFirstName.length > 2\n    && !filterInput(trimLastName) && trimLastName.length > 2\n    && !filterInput(trimEmail) && password.length > 6) {\n    const {firstName, lastName, email, password} = req.body;\n    const payload = {\n      firstName,\n      lastName,\n      email\n    }\n    const token = jwt.sign(payload, process.env.SECRET_KEY);\n    req.token = token;\n    getEmail(email)\n   .then((result)=>{\n      if(result.length > 0){\n          sendResponse(res, 400, null, 'Not allowed to sign up');\n      }else{\n         const hashedPassword = bcrypt.genSalt(10, (err,salt)=>{\n            bcrypt.hash(password,salt,(err,hash) =>{\n              insertUsers(firstName,lastName,email,hash,token);\n              next();\n            })\n         });\n         \n      }\n   }).catch((err)=>{\n      res.send(err);\n   });\n        \n    } else {\n      sendResponse(res, 400, null, 'Ensure username, email and password are valid entries');\n    }\n  }\n\n} \n\n\n\n\nconst validateUserSignIn = (req, res, next) => {\n  const { email, password } = req.body;\n  if(typeof email === undefined && typeof password === undefined){\n    sendResponse(res,400, null, 'Something went wrong');\n  }else{\n    const trimEmail = trimAllSpace(email);\n    if (validator.isEmail(email) && atEpicMail(trimEmail) && !filterInput(trimEmail) && password.length > 6) {\n        getEmail(email)\n        .then((result)=>{\n            bcrypt.compare(password, result[0].password,(err,data)=>{\n             if(!data){      \n               sendResponse(res, 400, null, 'Password Incorrect');\n             }else{\n                  const payload = {};\n                  payload.userId = result[0].id;\n                  payload.firstName = result[0].firstname;\n                  payload.lastName  = result[0].lastname;\n                  payload.email  = result[0].email\n                  req.payload = payload;\n                  next();\n             }\n          })\n        }).catch((e)=>{\n          sendResponse(res,400, null, \"unable to login this user\");\n        })\n    \n  } else {\n    sendResponse(res, 400, null, 'Ensure email and password are valid entries');\n  }\n }\n};\n\n\n\n\n//FORMAT OF TOKEN\n//Authorizarion: Bearer <access_token>\n\n//verify Token\nconst verifyToken = (req, res, next) => {\n  //Get auth header value\n  const bearerHeader = req.headers['authorization'];\n\n  //check if bearer header is undefined\n  if(typeof bearerHeader !== 'undefined'){\n     //Split at the space\n     const bearer = bearerHeader.split(' ');\n\n     //Get token from array\n     const bearerToken = bearer[1];\n\n     //Set the token\n     req.token = bearerToken;\n\n     //Next middleware\n     next();\n  }else{\n    sendResponse(res,404,null, 'forbidden');\n  }\n}\n\n\n\nexport {\n  isPositiveInteger,filterInput,trimAllSpace,validateUserEntry,validateUserSignIn,verifyToken,atEpicMail};\n"]}