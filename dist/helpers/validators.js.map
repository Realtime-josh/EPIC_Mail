{"version":3,"sources":["../../server/helpers/validators.js"],"names":["dotenv","config","isPositiveInteger","test","s","filterInput","input","pattern","result","trimAllSpace","str","replace","atEpicMail","match","length","validateUserEntry","req","res","next","body","email","firstName","lastName","password","trimFirstName","trimLastName","trimEmail","validator","isEmail","payload","token","jwt","sign","process","env","SECRET_KEY","then","hashedPassword","bcrypt","genSalt","err","salt","hash","catch","send","validateUserSignIn","compare","data","userId","id","firstname","lastname","e","verifyToken","bearerHeader","get","splitBearerHeader","split","verify","decrypt","decrypted","userDetails","senderItem","receiverEmail","subject","message","status","receiverId","userid"],"mappings":"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","file":"validators.js","sourcesContent":["import validator from 'validator';;\nimport { sendResponse } from './responses';\nimport { getEmail, insertUsers } from '../crud/db'\nimport bcrypt from 'bcryptjs'\nimport jwt from \"jsonwebtoken\"\nimport dotenv from 'dotenv';\n\ndotenv.config();\n// let connectionString = process.env.DATABASE_URL;\n\n\nconst isPositiveInteger = s => /^\\+?[1-9][\\d]*$/.test(s);\n\nconst filterInput = (input) => {\n  const pattern = /[~!#$%^&*()+={}:'\"<>?;',]/;\n  const result = pattern.test(input);\n  return result;\n};\n\nconst trimAllSpace = str => str.replace(/\\s+/g, '');\n\nconst atEpicMail = (input) => {\n  const result = input.match(/@epicmail.com/g)\n  if(result === null){\n  \treturn false;\n  }else if(result.length > 0){\n  \treturn true;\n  }\n};\n\n\nconst validateUserEntry = (req, res, next) => {\n  const {\n    email, firstName, lastName, password,\n  } = req.body;\n\n  if(typeof email === 'undefined' || typeof firstName === 'undefined' || \n    typeof lastName === 'undefined' || typeof password === 'undefined'){\n    sendResponse(res, 400, null, \"Ensure that all fields are correctly filled out\")\n  }else{\n      const trimFirstName = trimAllSpace(firstName);\n      const trimLastName = trimAllSpace(lastName);\n      const trimEmail = trimAllSpace(email);\n        if (validator.isEmail(email) && atEpicMail(trimEmail) && !filterInput(trimFirstName) && trimFirstName.length > 2\n    && !filterInput(trimLastName) && trimLastName.length > 2\n    && !filterInput(trimEmail) && password.length > 6) {\n    const {firstName, lastName, email, password} = req.body;\n    const payload = {\n      firstName,\n      lastName,\n      email\n    }\n    const token = jwt.sign(payload, process.env.SECRET_KEY);\n    req.token = token;\n    getEmail(email)\n   .then((result)=>{\n      if(result.length > 0){\n          sendResponse(res, 400, null, 'Not allowed to sign up');\n      }else{\n         const hashedPassword = bcrypt.genSalt(10, (err,salt)=>{\n            bcrypt.hash(password,salt,(err,hash) =>{\n              insertUsers(firstName,lastName,email,hash,token);\n              next();\n            })\n         });\n         \n      }\n   }).catch((err)=>{\n      res.send(err);\n   });\n        \n    } else {\n      sendResponse(res, 400, null, 'Ensure username, email and password are valid entries');\n    }\n  }\n\n} \n\n\n\nconst validateUserSignIn = (req, res, next) => {\n  const { email, password } = req.body;\n  if(typeof email === 'undefined' || typeof password === 'undefined'){\n    sendResponse(res,400, null, 'Something went wrong');\n  }else{\n    const trimEmail = trimAllSpace(email);\n    if (validator.isEmail(email) && atEpicMail(trimEmail) && !filterInput(trimEmail) && password.length > 6) {\n        getEmail(email)\n        .then((result)=>{\n            bcrypt.compare(password, result[0].password,(err,data)=>{\n             if(!data){      \n               sendResponse(res, 400, null, 'Password Incorrect');\n             }else{\n                  const payload = {};\n                  payload.userId = result[0].id;\n                  payload.firstName = result[0].firstname;\n                  payload.lastName  = result[0].lastname;\n                  payload.email  = result[0].email\n                  req.payload = payload;\n                  next();\n             }\n          })\n        }).catch((e)=>{\n          sendResponse(res,400, null, \"unable to login this user\");\n        })\n    \n  } else {\n    sendResponse(res, 400, null, 'Ensure email and password are valid entries');\n  }\n }\n};\n\n\nconst verifyToken = (req, res, next) => {\n  const bearerHeader = req.get('Authorization');\n  if (typeof bearerHeader !== \"undefined\") {\n    const splitBearerHeader = bearerHeader.split(\" \");\n    const token = splitBearerHeader[1]\n    jwt.verify(token, process.env.SECRET_KEY, (err, data) => {\n      if (err) {\n        sendResponse(res, 400, null, \"authentication failed!\");\n      } else {\n        const decrypt = jwt.verify(token, process.env.SECRET_KEY);\n        req.body.decrypted = decrypt;\n        getEmail(req.body.decrypted.email)\n          .then((result) => {\n            req.body.userDetails = result;\n            next();\n          })\n          .catch(() => {\n            // console.log(e);\n            sendResponse(res, 403, null, 'Invalid user');\n          });\n\n      };\n    });\n\n  } else {\n    sendResponse(res, 404, null, \"Cannot authenticate user\")\n  }\n}\n\nconst senderItem = (req, res, next) =>{\n  const {receiverEmail, subject, message, status} = req.body\n  if(typeof receiverEmail === 'undefined' || typeof subject === 'undefined' || typeof message === 'undefined' ||\n    typeof status === 'undefined'){\n      sendResponse(res,400,\"All fields must be filled out correctly\")\n  }else{\n     const trimEmail = trimAllSpace(receiverEmail);\n     if (validator.isEmail(receiverEmail) && atEpicMail(trimEmail) && !filterInput(trimEmail)) {\n         getEmail(receiverEmail)\n         .then((result)=>{\n            if(result.length > 0){\n              const receiverId = result[0].userid\n              req.receiverId = receiverId\n              next();\n            }else{\n              sendResponse(res,404, null, 'could not fetch email')\n            };\n         }).catch((e)=>{\n           sendResponse(res,400, null, \"unable to retrieve email\");\n         });\n     }else{\n        sendResponse(res,400,null, 'unable process');\n     };\n  };\n}\n\n\n\n\n\n\nexport{isPositiveInteger,filterInput,trimAllSpace,\n  validateUserEntry,validateUserSignIn,verifyToken,atEpicMail,senderItem};\n"]}