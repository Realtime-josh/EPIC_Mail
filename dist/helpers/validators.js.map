{"version":3,"sources":["../../server/helpers/validators.js"],"names":["isPositiveInteger","test","s","filterInput","input","pattern","result","trimAllSpace","str","replace","validateUserEntry","req","res","next","body","email","firstName","lastName","password","contactItem","contact","trimFirstName","trimLastName","trimEmail","validator","isEmail","length","checkEmail","user","users","filter","userId","lastUserId","fullName","usersList","set","String","validateUserSignIn","accountDetails","createMessage","senderId","receiverId","subject","message","status","verifyUsersExist","verifyParentMessage","Message","messages","getParentMessage","parentMessageId","messageDetails","messageId","lastMessageId","createdOn","Date","mapMessages","createParentMessageId","lastParentMessageId"],"mappings":"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","file":"validators.js","sourcesContent":["import validator from 'validator';\r\nimport { user } from '../models/users';\r\nimport { usersList } from '../models/users';\r\nimport { mapMessages } from '../models/messages';\r\nimport { Message } from '../models/messages';\r\nimport { sendResponse } from './responses';\r\n\r\n\r\nconst isPositiveInteger = s => /^\\+?[1-9][\\d]*$/.test(s);\r\n\r\nconst filterInput = (input) => {\r\n  const pattern = /[~!#$%^&*()+={}:'\"<>?;',]/;\r\n  const result = pattern.test(input);\r\n  return result;\r\n};\r\n\r\nconst trimAllSpace = str => str.replace(/\\s+/g, '');\r\n\r\n\r\nconst validateUserEntry = (req, res, next) => {\r\n  const {\r\n    email, firstName, lastName, password,\r\n  } = req.body;\r\n\r\n  const contactItem = { contact: [] };\r\n  const trimFirstName = trimAllSpace(firstName);\r\n  const trimLastName = trimAllSpace(lastName);\r\n  const trimEmail = trimAllSpace(email);\r\n\r\n  if (validator.isEmail(email) && !filterInput(trimFirstName) && trimFirstName.length > 2\r\n        && !filterInput(trimLastName) && trimLastName.length > 2\r\n\t\t&& !filterInput(trimEmail) && password.length > 6) {\r\n    const checkEmail = user.users.filter(result => result.email === email);\r\n    if (checkEmail.length < 1) {\r\n      contactItem.userId = user.lastUserId + 1;\r\n      user.lastUserId += 1;\r\n      contactItem.firstName = trimFirstName;\r\n      contactItem.lastName = trimLastName;\r\n      contactItem.password = password;\r\n      contactItem.email = email;\r\n      contactItem.fullName = `${trimFirstName } ${trimLastName}`;\r\n      usersList.set(String(contactItem.userId), contactItem);\r\n      req.contactItem = contactItem;\r\n      next();\r\n    } else {\r\n      sendResponse(res, 400, null, 'email already exist.');\r\n    }\r\n  } else {\r\n    sendResponse(res, 400, null, 'Ensure username, email and password are valid entries');\r\n  }\r\n};\r\n\r\n\r\nconst validateUserSignIn = (req, res, next) => {\r\n  const { email, password } = req.body;\r\n  const trimEmail = trimAllSpace(email);\r\n  if (validator.isEmail(email) && !filterInput(trimEmail) && password.length > 6) {\r\n    const checkEmail = user.users.filter(result => result.email === email);\r\n\r\n    if (checkEmail.length > 0 && checkEmail[0].password === password) {\r\n      req.accountDetails = checkEmail[0];\r\n      next();\r\n    } else {\r\n      sendResponse(res, 400, null, 'email and password is not associated with a registered account');\r\n    }\r\n  } else {\r\n    sendResponse(res, 400, null, 'Ensure email and password are valid entries');\r\n  }\r\n};\r\n\r\n\r\nconst createMessage = (req, res, next) => {\r\n  const {\r\n    senderId, receiverId, subject, message, status,\r\n  } = req.body;\r\n  \r\n  const verifyUsersExist = user.users.filter(result => (result.userId === senderId || result.userId === receiverId));\r\n\r\n  const verifyParentMessage = Message.messages.filter(result => (result.senderId === senderId && result.receiverId === receiverId) \r\n                || (result.senderId === receiverId && result.receiverId === senderId));\r\n\r\n\r\n  if (verifyUsersExist.length > 1) {\r\n    if (verifyParentMessage.length > 0) {\r\n      const getParentMessage = verifyParentMessage[0].parentMessageId;\r\n      const messageDetails = {\r\n        messageId: Message.lastMessageId + 1,\r\n        senderId,\r\n        receiverId,\r\n        parentMessageId: getParentMessage,\r\n        subject,\r\n        message,\r\n        status,\r\n        createdOn: new Date(),\r\n      };\r\n      Message.lastMessageId += 1;\r\n      mapMessages.set(String(messageDetails.messageId), messageDetails);\r\n      req.messageDetails = messageDetails;\r\n      next();\r\n    } else {\r\n      const createParentMessageId = Message.lastParentMessageId + 1;\r\n      const messageDetails = {\r\n        messageId: Message.lastMessageId + 1,\r\n        senderId,\r\n        receiverId,\r\n        parentMessageId: createParentMessageId,\r\n        subject,\r\n        message,\r\n        status,\r\n        createdOn: new Date(),\r\n      };\r\n      Message.lastMessageId += 1;\r\n      Message.lastParentMessageId += 1;\r\n      mapMessages.set(String(messageDetails.messageId), messageDetails);\r\n      req.messageDetails = messageDetails;\r\n      next();\r\n    }\r\n  } else {\r\n    sendResponse(res, 401, null, 'one or more users is not registered');\r\n  }\r\n};\r\n\r\n// createMessage();\r\n\r\n\r\nexport {\r\n  isPositiveInteger,\r\n  filterInput,\r\n  trimAllSpace,\r\n  validateUserEntry,\r\n  validateUserSignIn,\r\n  createMessage,\r\n};\r\n"]}