{"version":3,"sources":["../../server/helpers/validators.js"],"names":["dotenv","config","isPositiveInteger","test","s","filterInput","input","pattern","result","trimAllSpace","str","replace","atEpicMail","match","length","validateUserEntry","req","res","next","body","email","firstName","lastName","password","contactItem","contact","trimFirstName","trimLastName","trimEmail","validator","isEmail","checkEmail","user","users","filter","userId","lastUserId","fullName","usersList","set","String","validateUserSignIn","accountDetails","createMessage","senderId","receiverId","subject","message","status","verifyUsersExist","verifyParentMessage","Message","messages","getParentMessage","parentMessageId","messageDetails","messageId","lastMessageId","createdOn","Date","mapMessages","createParentMessageId","lastParentMessageId","validateUserEntryy","payload","token","jwt","sign","process","env","SECRET_KEY","then","hashedPassword","bcrypt","genSalt","err","salt","hash","catch","send","validateUserSignInn","undefined","compare","data","id","firstname","lastname","e","verifyToken","bearerHeader","get","splitBearerHeader","split","verify","decrypt","decrypted","userDetails","senderItem","receiverEmail","userid"],"mappings":"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","file":"validators.js","sourcesContent":["import validator from 'validator';\r\nimport { user } from '../models/users';\r\nimport { usersList } from '../models/users';\r\nimport { mapMessages } from '../models/messages';\r\nimport { Message } from '../models/messages';\r\nimport { sendResponse } from './responses';\r\nimport  jwt  from 'jsonwebtoken'\r\nimport { getUserEmail, insertUsers } from '../crud/db'\r\nimport bcrypt from 'bcryptjs'\r\nimport dotenv from 'dotenv';\r\n\r\ndotenv.config();\r\n// let connectionString = process.env.DATABASE_URL;\r\n\r\n\r\nconst isPositiveInteger = s => /^\\+?[1-9][\\d]*$/.test(s);\r\n\r\nconst filterInput = (input) => {\r\n  const pattern = /[~!#$%^&*()+={}:'\"<>?;',]/;\r\n  const result = pattern.test(input);\r\n  return result;\r\n};\r\n\r\nconst trimAllSpace = str => str.replace(/\\s+/g, '');\r\n\r\nconst atEpicMail = (input) => {\r\n  const result = input.match(/@epicmail.com/g)\r\n  if(result === null){\r\n    return false;\r\n  }else if(result.length > 0){\r\n    return true;\r\n  }\r\n};\r\n\r\n\r\nconst validateUserEntry = (req, res, next) => {\r\n  const {\r\n    email, firstName, lastName, password,\r\n  } = req.body;\r\n\r\n  const contactItem = { contact: [] };\r\n  const trimFirstName = trimAllSpace(firstName);\r\n  const trimLastName = trimAllSpace(lastName);\r\n  const trimEmail = trimAllSpace(email);\r\n\r\n  if (validator.isEmail(email) && !filterInput(trimFirstName) && trimFirstName.length > 2\r\n        && !filterInput(trimLastName) && trimLastName.length > 2\r\n\t\t&& !filterInput(trimEmail) && password.length > 6) {\r\n    const checkEmail = user.users.filter(result => result.email === email);\r\n    if (checkEmail.length < 1) {\r\n      contactItem.userId = user.lastUserId + 1;\r\n      user.lastUserId += 1;\r\n      contactItem.firstName = trimFirstName;\r\n      contactItem.lastName = trimLastName;\r\n      contactItem.password = password;\r\n      contactItem.email = email;\r\n      contactItem.fullName = `${trimFirstName } ${trimLastName}`;\r\n      usersList.set(String(contactItem.userId), contactItem);\r\n      req.contactItem = contactItem;\r\n      next();\r\n    } else {\r\n      sendResponse(res, 400, null, 'email already exist.');\r\n    }\r\n  } else {\r\n    sendResponse(res, 400, null, 'Ensure username, email and password are valid entries');\r\n  }\r\n};\r\n\r\n\r\nconst validateUserSignIn = (req, res, next) => {\r\n  const { email, password } = req.body;\r\n  const trimEmail = trimAllSpace(email);\r\n  if (validator.isEmail(email) && !filterInput(trimEmail) && password.length > 6) {\r\n    const checkEmail = user.users.filter(result => result.email === email);\r\n\r\n    if (checkEmail.length > 0 && checkEmail[0].password === password) {\r\n      req.accountDetails = checkEmail[0];\r\n      next();\r\n    } else {\r\n      sendResponse(res, 400, null, 'email and password is not associated with a registered account');\r\n    }\r\n  } else {\r\n    sendResponse(res, 400, null, 'Ensure email and password are valid entries');\r\n  }\r\n};\r\n\r\n\r\nconst createMessage = (req, res, next) => {\r\n  const {\r\n    senderId, receiverId, subject, message, status,\r\n  } = req.body;\r\n  \r\n  const verifyUsersExist = user.users.filter(result => (result.userId === senderId || result.userId === receiverId));\r\n\r\n  const verifyParentMessage = Message.messages.filter(result => (result.senderId === senderId && result.receiverId === receiverId) \r\n                || (result.senderId === receiverId && result.receiverId === senderId));\r\n\r\n\r\n  if (verifyUsersExist.length > 1) {\r\n    if (verifyParentMessage.length > 0) {\r\n      const getParentMessage = verifyParentMessage[0].parentMessageId;\r\n      const messageDetails = {\r\n        messageId: Message.lastMessageId + 1,\r\n        senderId,\r\n        receiverId,\r\n        parentMessageId: getParentMessage,\r\n        subject,\r\n        message,\r\n        status,\r\n        createdOn: new Date(),\r\n      };\r\n      Message.lastMessageId += 1;\r\n      mapMessages.set(String(messageDetails.messageId), messageDetails);\r\n      req.messageDetails = messageDetails;\r\n      next();\r\n    } else {\r\n      const createParentMessageId = Message.lastParentMessageId + 1;\r\n      const messageDetails = {\r\n        messageId: Message.lastMessageId + 1,\r\n        senderId,\r\n        receiverId,\r\n        parentMessageId: createParentMessageId,\r\n        subject,\r\n        message,\r\n        status,\r\n        createdOn: new Date(),\r\n      };\r\n      Message.lastMessageId += 1;\r\n      Message.lastParentMessageId += 1;\r\n      mapMessages.set(String(messageDetails.messageId), messageDetails);\r\n      req.messageDetails = messageDetails;\r\n      next();\r\n    }\r\n  } else {\r\n    sendResponse(res, 401, null, 'one or more users is not registered');\r\n  }\r\n};\r\n\r\n// createMessage();\r\n\r\n\r\nconst validateUserEntryy = (req, res, next) => {\r\n  const {\r\n    email, firstName, lastName, password,\r\n  } = req.body;\r\n\r\n  if(typeof email === 'undefined' || typeof firstName === 'undefined' || typeof lastName === 'undefined' || \r\n    typeof password === 'undefined'){\r\n    sendResponse(res, 400, null, \"Ensure that all fields are correctly filled out\")\r\n  }else{\r\n      const trimFirstName = trimAllSpace(firstName);\r\n      const trimLastName = trimAllSpace(lastName);\r\n      const trimEmail = trimAllSpace(email);\r\n        if (validator.isEmail(email) && atEpicMail(trimEmail) && !filterInput(trimFirstName) && trimFirstName.length > 2\r\n    && !filterInput(trimLastName) && trimLastName.length > 2\r\n    && !filterInput(trimEmail) && password.length > 6) {\r\n    const {firstName, lastName, email, password} = req.body;\r\n    const payload = {\r\n      firstName,\r\n      lastName,\r\n      email\r\n    }\r\n    const token = jwt.sign(payload, process.env.SECRET_KEY);\r\n    req.token = token;\r\n    getUserEmail(email)\r\n   .then((result)=>{\r\n      if(result.length > 0){\r\n          sendResponse(res, 400, null, 'Not allowed to sign up');\r\n      }else{\r\n         const hashedPassword = bcrypt.genSalt(10, (err,salt)=>{\r\n            bcrypt.hash(password,salt,(err,hash) =>{\r\n              insertUsers(firstName,lastName,email,hash,token);\r\n              next();\r\n            })\r\n         });\r\n         \r\n      }\r\n   }).catch((err)=>{\r\n      res.send(err);\r\n   });\r\n        \r\n    } else {\r\n      sendResponse(res, 400, null, 'Ensure username, email and password are valid entries');\r\n    }\r\n  }\r\n\r\n} \r\n\r\n\r\n\r\n\r\nconst validateUserSignInn = (req, res, next) => {\r\n  const { email, password } = req.body;\r\n  if(typeof email === undefined && typeof password === undefined){\r\n    sendResponse(res,400, null, 'Something went wrong');\r\n  }else{\r\n    const trimEmail = trimAllSpace(email);\r\n    if (validator.isEmail(email) && atEpicMail(trimEmail) && !filterInput(trimEmail) && password.length > 6) {\r\n        getUserEmail(email)\r\n        .then((result)=>{\r\n            bcrypt.compare(password, result[0].password,(err,data)=>{\r\n             if(!data){      \r\n               sendResponse(res, 400, null, 'Password Incorrect');\r\n             }else{\r\n                  const payload = {};\r\n                  payload.userId = result[0].id;\r\n                  payload.firstName = result[0].firstname;\r\n                  payload.lastName  = result[0].lastname;\r\n                  payload.email  = result[0].email\r\n                  req.payload = payload;\r\n                  next();\r\n             }\r\n          })\r\n        }).catch((e)=>{\r\n          sendResponse(res,400, null, \"unable to login this user\");\r\n        })\r\n    \r\n  } else {\r\n    sendResponse(res, 400, null, 'Ensure email and password are valid entries');\r\n  }\r\n }\r\n};\r\n\r\n\r\nconst verifyToken = (req, res, next) => {\r\n  const bearerHeader = req.get('Authorization');\r\n  if (typeof bearerHeader !== \"undefined\") {\r\n    const splitBearerHeader = bearerHeader.split(\" \");\r\n    const token = splitBearerHeader[1]\r\n    jwt.verify(token, process.env.SECRET_KEY, (err, data) => {\r\n      if (err) {\r\n        sendResponse(res, 400, null, \"authentication failed!\");\r\n      } else {\r\n        const decrypt = jwt.verify(token, process.env.SECRET_KEY);\r\n        req.body.decrypted = decrypt;\r\n        getUserEmail(req.body.decrypted.email)\r\n          .then((result) => {\r\n            req.body.userDetails = result;\r\n            next();\r\n          })\r\n          .catch(() => {\r\n            // console.log(e);\r\n            sendResponse(res, 403, null, 'Invalid user');\r\n          });\r\n\r\n      };\r\n    });\r\n\r\n  } else {\r\n    sendResponse(res, 404, null, \"Cannot authenticate user\")\r\n  }\r\n}\r\n\r\nconst senderItem = (req, res, next) =>{\r\n  const {receiverEmail, subject, message, status} = req.body\r\n  if(typeof receiverEmail === 'undefined' || typeof subject === 'undefined' || typeof message === 'undefined' ||\r\n    typeof status === 'undefined'){\r\n      sendResponse(res,400,\"All fields must be filled out correctly\")\r\n  }else{\r\n     const trimEmail = trimAllSpace(receiverEmail);\r\n     if (validator.isEmail(receiverEmail) && atEpicMail(trimEmail) && !filterInput(trimEmail)) {\r\n         getUserEmail(receiverEmail)\r\n         .then((result)=>{\r\n            if(result.length > 0){\r\n              const receiverId = result[0].userid\r\n              req.receiverId = receiverId\r\n              next();\r\n            }else{\r\n              sendResponse(res,404, null, 'could not fetch email')\r\n            };\r\n         }).catch((e)=>{\r\n           sendResponse(res,400, null, \"unable to retrieve email\");\r\n         });\r\n     }else{\r\n        sendResponse(res,400,null, 'unable process');\r\n     };\r\n  };\r\n}\r\n\r\n\r\nexport {\r\n  isPositiveInteger,\r\n  filterInput,\r\n  trimAllSpace,\r\n  validateUserEntry,\r\n  validateUserEntryy,\r\n  validateUserSignIn,\r\n  validateUserSignInn,\r\n  createMessage,\r\n  atEpicMail,\r\n  verifyToken,\r\n  senderItem\r\n};\r\n\r\n"]}