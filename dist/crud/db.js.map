{"version":3,"sources":["../../server/crud/db.js"],"names":["dotenv","config","connectionString","usersTable","messageTable","getUserEmail","email","Promise","resolve","reject","client","Client","connect","then","sql","params","query","result","rows","end","catch","e","insertUsers","firstName","lastName","password","token","getMessagesById","userId","insertMessage","receiverid","senderid","subject","message","status","createdon","clearTable","tableName","rowCount"],"mappings":"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","file":"db.js","sourcesContent":["import { Client } from 'pg';\nimport dotenv from 'dotenv';\n\ndotenv.config();\n// let connectionString = process.env.DATABASE_URL;\n// Database connection String\nlet connectionString = \"postgres://Frank:jfrank@127.0.0.1:5432/epicmail\";\n\nconst usersTable = 'users';\nconst messageTable = 'message';\n\n\nconst getUserEmail = (email) => {\n    return new Promise((resolve,reject)=>{\n        const client = new Client(connectionString);\n       client.connect()\n       .then(()=>{\n           const sql = `SELECT * FROM ${usersTable} WHERE email=$1`;\n           const params = [email];\n           client.query(sql,params)\n           .then((result)=>{\n                resolve(result.rows);\n               client.end();\n           }).catch((e)=>{\n            reject(e);\n           })\n       }).catch((e)=>{\n        reject(e);\n       })\n    })\n  }\n\n\n  const insertUsers = (firstName, lastName, email, password, token) => {\n    return new Promise((resolve,reject)=>{\n      const client = new Client(connectionString);\n      client.connect()\n      .then(()=>{\n        const sql = `INSERT INTO ${usersTable}(firstname,lastname,email,password,token)VALUES($1,$2,$3,$4,$5)`;\n        const params = [firstName,lastName,email,password,token];\n        client.query(sql,params)\n        .then((result)=>{\n             resolve(result.rows);\n             client.end();\n        }).catch((e)=>{\n          reject(e)\n        })\n      }).catch((e)=>{\n        reject(e);\n      });\n    });\n  }\n\n  const getMessagesById = (userId) => {\n    return new Promise((resolve,reject)=>{\n      const client = new Client(connectionString);\n      client.connect()\n      .then(()=>{\n         const sql = `SELECT message,subject FROM ${messageTable} WHERE receiverid=$1`\n         const params = [userId];\n         client.query(sql,params)\n         .then((result)=>{\n             resolve(result.rows);\n             client.end();\n         }).catch((e)=>{\n           reject(e)\n         })\n      }).catch((e)=>{\n        reject(e)\n      });\n    });\n  }\n\n  const insertMessage = (receiverid,senderid,subject,message,status,createdon) => {\n    return new Promise((resolve,reject)=>{\n      const client = new Client(connectionString);\n      client.connect()\n      .then(()=>{\n        const sql = `INSERT INTO ${messageTable}(receiverid,senderid,subject,message,status,createdon)VALUES($1,$2,$3,$4,$5,$6)`\n        const params = [receiverid,senderid,subject,message,status,createdon]\n        client.query(sql,params)\n        .then((result)=>{\n           resolve(result.rows)\n           client.end();\n        }).catch((e)=>{\n          reject(e)\n        })\n      }).catch((e)=>{\n        reject(e)\n      });\n    });\n  }\n\n  \n        \n        \n\n\n  const clearTable = tableName => new Promise((resolve, reject) => {\n  const client = new Client(connectionString);\n  client.connect()\n    .then(() => {\n      let sql = `DELETE FROM ${tableName};`;\n      if (tableName === usersTable) {\n        sql = `DELETE FROM ${tableName} WHERE user_level != 2;`;\n      }\n      client.query(sql)\n        .then((result) => {\n          resolve(result.rowCount);\n          client.end();\n        })\n        .catch(e => reject(e));\n    }).catch(e => reject(e));\n});\n\n\n\n\nexport{getUserEmail,insertMessage,getMessagesById}\n"]}