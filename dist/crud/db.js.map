{"version":3,"sources":["../../server/crud/db.js"],"names":["dotenv","config","connectionString","usersTable","getEmail","email","Promise","resolve","reject","client","Client","connect","then","sql","params","query","result","rows","end","catch","e","insertUsers","firstName","lastName","password","token","clearTable","tableName","rowCount"],"mappings":";;;;;;;AAAA;;AACA;;;;;;AAEAA,iBAAOC,MAAP;AACA;AACA;AACA,IAAIC,mBAAmB,iDAAvB;;AAEA,IAAMC,aAAa,OAAnB;;AAGA,IAAMC,WAAW,SAAXA,QAAW,CAACC,KAAD,EAAW;AACxB,SAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAASC,MAAT,EAAkB;AACjC,QAAMC,SAAS,IAAIC,UAAJ,CAAWR,gBAAX,CAAf;AACDO,WAAOE,OAAP,GACCC,IADD,CACM,YAAI;AACN,UAAMC,yBAAuBV,UAAvB,oBAAN;AACA,UAAMW,SAAS,CAACT,KAAD,CAAf;AACAI,aAAOM,KAAP,CAAaF,GAAb,EAAiBC,MAAjB,EACCF,IADD,CACM,UAACI,MAAD,EAAU;AACXT,gBAAQS,OAAOC,IAAf;AACDR,eAAOS,GAAP;AACH,OAJD,EAIGC,KAJH,CAIS,UAACC,CAAD,EAAK;AACbZ,eAAOY,CAAP;AACA,OAND;AAOH,KAXD,EAWGD,KAXH,CAWS,UAACC,CAAD,EAAK;AACbZ,aAAOY,CAAP;AACA,KAbD;AAcF,GAhBM,CAAP;AAiBD,CAlBH;;AAqBE,IAAMC,cAAc,SAAdA,WAAc,CAACC,SAAD,EAAYC,QAAZ,EAAsBlB,KAAtB,EAA6BmB,QAA7B,EAAuCC,KAAvC,EAAiD;AACnE,SAAO,IAAInB,OAAJ,CAAY,UAACC,OAAD,EAASC,MAAT,EAAkB;AACnC,QAAMC,SAAS,IAAIC,UAAJ,CAAWR,gBAAX,CAAf;AACAO,WAAOE,OAAP,GACCC,IADD,CACM,YAAI;AACR,UAAMC,uBAAqBV,UAArB,oEAAN;AACA,UAAMW,SAAS,CAACQ,SAAD,EAAWC,QAAX,EAAoBlB,KAApB,EAA0BmB,QAA1B,EAAmCC,KAAnC,CAAf;AACAhB,aAAOM,KAAP,CAAaF,GAAb,EAAiBC,MAAjB,EACCF,IADD,CACM,UAACI,MAAD,EAAU;AACXT,gBAAQS,OAAOC,IAAf;AACAR,eAAOS,GAAP;AACJ,OAJD,EAIGC,KAJH,CAIS,UAACC,CAAD,EAAK;AACZZ,eAAOY,CAAP;AACD,OAND;AAOD,KAXD,EAWGD,KAXH,CAWS,UAACC,CAAD,EAAK;AACZZ,aAAOY,CAAP;AACD,KAbD;AAcD,GAhBM,CAAP;AAiBD,CAlBD;;AAqBA,IAAMM,aAAa,SAAbA,UAAa;AAAA,SAAa,IAAIpB,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACjE,QAAMC,SAAS,IAAIC,UAAJ,CAAWR,gBAAX,CAAf;AACAO,WAAOE,OAAP,GACGC,IADH,CACQ,YAAM;AACV,UAAIC,uBAAqBc,SAArB,MAAJ;AACA,UAAIA,cAAcxB,UAAlB,EAA8B;AAC5BU,+BAAqBc,SAArB;AACD;AACDlB,aAAOM,KAAP,CAAaF,GAAb,EACGD,IADH,CACQ,UAACI,MAAD,EAAY;AAChBT,gBAAQS,OAAOY,QAAf;AACAnB,eAAOS,GAAP;AACD,OAJH,EAKGC,KALH,CAKS;AAAA,eAAKX,OAAOY,CAAP,CAAL;AAAA,OALT;AAMD,KAZH,EAYKD,KAZL,CAYW;AAAA,aAAKX,OAAOY,CAAP,CAAL;AAAA,KAZX;AAaD,GAfiC,CAAb;AAAA,CAAnB;;QAoBKhB,Q,GAAAA,Q;QAASiB,W,GAAAA,W","file":"db.js","sourcesContent":["import { Client } from 'pg';\r\nimport dotenv from 'dotenv';\r\n\r\ndotenv.config();\r\n// let connectionString = process.env.DATABASE_URL;\r\n// Database connection String\r\nlet connectionString = \"postgres://Frank:jfrank@127.0.0.1:5432/epicmail\";\r\n\r\nconst usersTable = 'users';\r\n\r\n\r\nconst getEmail = (email) => {\r\n    return new Promise((resolve,reject)=>{\r\n        const client = new Client(connectionString);\r\n       client.connect()\r\n       .then(()=>{\r\n           const sql = `SELECT * FROM ${usersTable} WHERE email=$1`;\r\n           const params = [email];\r\n           client.query(sql,params)\r\n           .then((result)=>{\r\n                resolve(result.rows);\r\n               client.end();\r\n           }).catch((e)=>{\r\n            reject(e);\r\n           })\r\n       }).catch((e)=>{\r\n        reject(e);\r\n       })\r\n    })\r\n  }\r\n\r\n\r\n  const insertUsers = (firstName, lastName, email, password, token) => {\r\n    return new Promise((resolve,reject)=>{\r\n      const client = new Client(connectionString);\r\n      client.connect()\r\n      .then(()=>{\r\n        const sql = `INSERT INTO ${usersTable}(firstname,lastname,email,password,token)VALUES($1,$2,$3,$4,$5)`;\r\n        const params = [firstName,lastName,email,password,token];\r\n        client.query(sql,params)\r\n        .then((result)=>{\r\n             resolve(result.rows);\r\n             client.end();\r\n        }).catch((e)=>{\r\n          reject(e)\r\n        })\r\n      }).catch((e)=>{\r\n        reject(e);\r\n      })\r\n    })\r\n  }\r\n\r\n\r\n  const clearTable = tableName => new Promise((resolve, reject) => {\r\n  const client = new Client(connectionString);\r\n  client.connect()\r\n    .then(() => {\r\n      let sql = `DELETE FROM ${tableName};`;\r\n      if (tableName === usersTable) {\r\n        sql = `DELETE FROM ${tableName} WHERE user_level != 2;`;\r\n      }\r\n      client.query(sql)\r\n        .then((result) => {\r\n          resolve(result.rowCount);\r\n          client.end();\r\n        })\r\n        .catch(e => reject(e));\r\n    }).catch(e => reject(e));\r\n});\r\n\r\n\r\n\r\n\r\nexport{getEmail,insertUsers}\r\n"]}