{"version":3,"sources":["../../server/routes/message.js"],"names":["messageRouter","express","Router","post","createMessage","req","res","messageDetails","Message","messages","push","status","send","message","get","id","params","verifyUser","user","users","filter","result","userId","parseInt","length","receivedMessages","receiverId","getName","usersList","fullName","receivedmessages","sentMessages","senderId","sentmessages","unreadMessages","unreadmessages","getEmail","email","delete","query","messageToDelete","getSpecificMail","messageId","getSpecificMailId","splice","indexOf","messageToGet"],"mappings":"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","file":"message.js","sourcesContent":["/* eslint-disable radix */\r\nimport express from 'express';\r\nimport { createMessage } from '../helpers/validators';\r\nimport { sendResponse } from '../helpers/responses';\r\nimport { Message } from '../models/messages';\r\nimport { usersList, user } from '../models/users';\r\n\r\n\r\nconst messageRouter = express.Router();\r\n\r\nmessageRouter.post('/messages', createMessage, (req, res) => {\r\n  const { messageDetails } = req;\r\n  Message.messages.push(messageDetails);\r\n  res.status(200).send({\r\n    status: 200,\r\n    message: 'Message successfully sent',\r\n    messageDetails,\r\n  });\r\n});\r\n\r\n\r\nmessageRouter.get('/messages', (req, res) => {\r\n  res.status(200).send({\r\n    status: 200,\r\n    messageDetails: Message.messages,\r\n  });\r\n});\r\n\r\n\r\nmessageRouter.get('/messages/:id', (req, res) => {\r\n  const { id } = req.params;\r\n  const verifyUser = user.users.filter(result => result.userId === parseInt(id));\r\n\r\n  if (verifyUser.length > 0) {\r\n    const receivedMessages = Message.messages.filter(result => result.receiverId === parseInt(id));\r\n    if (receivedMessages.length > 0) {\r\n      const getName = usersList.get(parseInt(id));\r\n      res.status(200).send({\r\n        status: 200,\r\n        message: `All received messages for ${getName.fullName}`,\r\n        receivedmessages: receivedMessages,\r\n      });\r\n    } else {\r\n      sendResponse(res, 200, 'No messages found for user', null);\r\n    }\r\n  } else {\r\n    sendResponse(res, 404, null, 'Not Found');\r\n  }\r\n});\r\n\r\n\r\nmessageRouter.get('/messages/sent/:id', (req, res) => {\r\n  const { id } = req.params;\r\n  const verifyUser = user.users.filter(result => result.userId === parseInt(id, 10));\r\n\r\n  if (verifyUser.length > 0) {\r\n    const sentMessages = Message.messages.filter(result => result.senderId === parseInt(id, 10));\r\n    if (sentMessages.length > 0) {\r\n      const getName = usersList.get(parseInt(id, 10));\r\n      res.status(200).send({\r\n        status: 200,\r\n        message: `All Sent messages for ${getName.fullName}`,\r\n        sentmessages: sentMessages,\r\n      });\r\n    } else {\r\n      sendResponse(res, 200, 'No messages found for user', null);\r\n    }\r\n  } else {\r\n    sendResponse(res, 404, null, 'Not Found');\r\n  }\r\n});\r\n\r\n\r\nmessageRouter.get('/messages/unread/:id', (req, res) => {\r\n  const { id } = req.params;\r\n  const verifyUser = user.users.filter(result => result.userId === parseInt(id));\r\n\r\n  if (verifyUser.length > 0) {\r\n    const unreadMessages = Message.messages.filter(result => result.receiverId === parseInt(id) && result.status === 'unread');\r\n    if (unreadMessages.length > 0) {\r\n      const getName = usersList.get(parseInt(id));\r\n      res.status(200).send({\r\n        status: 200,\r\n        message: `All unread messages for ${getName.fullName}`,\r\n        unreadmessages: unreadMessages,\r\n      });\r\n    } else {\r\n      sendResponse(res, 200, 'No messages found for user', null);\r\n    }\r\n  } else {\r\n    sendResponse(res, 404, null, 'Not Found');\r\n  }\r\n});\r\n\r\n\r\nmessageRouter.get('/email/:id', (req, res) => {\r\n  const { id } = req.params;\r\n  const verifyUser = user.users.filter(result => result.userId === parseInt(id));\r\n  if (verifyUser.length > 0) {\r\n    const getEmail = verifyUser[0].email;\r\n    res.status(200).send({\r\n      status: 200,\r\n      message: 'Email found',\r\n      email: getEmail,\r\n    });\r\n  } else {\r\n    sendResponse(res, 404, null, 'Not Found');\r\n  }\r\n});\r\n\r\n\r\nmessageRouter.delete('/messages/:id', (req, res) => {\r\n  const { userId } = req.query;\r\n  const { id } = req.params;\r\n  const verifyUser = user.users.filter(result => result.userId === parseInt(userId));\r\n  if (verifyUser.length > 0) {\r\n    const messageToDelete = Message.messages.filter(result => result.receiverId === parseInt(userId));\r\n\r\n    if (messageToDelete.length > 0) {\r\n      const getSpecificMail = messageToDelete.filter(result => result.messageId === parseInt(id));\r\n\r\n\r\n      if (getSpecificMail.length > 0) {\r\n        const getSpecificMailId = getSpecificMail[0];\r\n        Message.messages.splice(Message.messages.indexOf(getSpecificMailId), 1);\r\n        res.status(200).send({\r\n          status: 200,\r\n          message: 'Email successfully deleted',\r\n          messageDetails: getSpecificMail,\r\n        });\r\n      } else {\r\n        sendResponse(res, 200, 'no email to be deleted', null);\r\n      }\r\n    } else {\r\n      sendResponse(res, 200, 'no email found', null);\r\n    }\r\n  } else {\r\n    sendResponse(res, 404, null, 'Not Found');\r\n  }\r\n});\r\n\r\n\r\nmessageRouter.get('/messages/specificmail/:id', (req, res) => {\r\n  const { userId } = req.query;\r\n  const { id } = req.params;\r\n  const verifyUser = user.users.filter(result => result.userId === parseInt(userId));\r\n\r\n  if (verifyUser.length > 0) {\r\n    const messageToGet = Message.messages.filter(result => result.receiverId === parseInt(userId));\r\n    if (messageToGet.length > 0) {\r\n      const getSpecificMail = messageToGet.filter(result => result.messageId === parseInt(id));\r\n\r\n      if (getSpecificMail.length > 0) {\r\n        const getSpecificMailId = getSpecificMail[0];\r\n        res.status(200).send({\r\n          status: 200,\r\n          message: 'Email successfully fetched',\r\n          messageDetails: getSpecificMailId,\r\n        });\r\n      } else {\r\n        sendResponse(res, 200, 'Email successfully fetched', null);\r\n      }\r\n    } else {\r\n      sendResponse(res, 200, 'no email found', null);\r\n    }\r\n  } else {\r\n    sendResponse(res, 404, null, 'Not Found');\r\n  }\r\n});\r\n\r\n\r\nexport {\r\n  messageRouter,\r\n};\r\n"]}